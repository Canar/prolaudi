#!/usr/bin/env swipl
% vim: ft=prolog:noet:ts=4:sw=4
:- initialization(main,main).
:- use_module(library(protobufs)).
:- set_stream(user_output,type(binary)).

rate(44100).
key(432).

%signal/3 - handles Len calculation
%signal([],_,_).
signal(S,Freq,Len):-
	rate(Rate),
	Samples is truncate(Rate*Len),
	signal(S,0,Samples,Freq).

%signal/4 - samples
signal([],S,S,_).
signal([Sample|T],SIndex,Samples,Freq):-
	rate(Rate),
	key(Key),
	Sample is sin( Freq * Key * SIndex / Rate *pi*2),
	SIndexN is SIndex+1,
	signal(T,SIndexN,Samples,Freq).

%signals/3 - sequence frequencies
signals([],[],_).
signals(S,[H|T],L):-
	signal(Sa,H,L),
	append(Sa,Sb,S),
	signals(Sb,T,L).
/*
 *
 */

%octave scale twelve-tet
ost(maj,[0,4,7]).
ost(min,[0,3,7]).
ost(maj7,[0,4,7,11]).
ost(ionian,[0,2,4,5,7,9,11]).

%ost frequency map
ostfm([Hout|Tout],[Hin|Tin]):-
	Hout is 2 ** (Hin / 12),
	ostfm(Tout,Tin).
ostfm([],[]).
	

pfs(_,[]).
pfs(Stream,[H|T]):-
	protobufs:float32_codes(H,C),
	pbs(user_output,C),
	pfs(Stream,T).

pbs(_,[]).
pbs(Stream,[H|T]):-put_byte(Stream,H),pbs(Stream,T).

main(_):-
	Len is 10.0,
	get_time(StartTime),

	ost(ionian,O),
	ostfm(F,O),
	signals(S,F,0.4),

	pfs(user_output,S),
	
	get_time(EndTime),
	TakenTime is EndTime-StartTime,
	Rate is Len / TakenTime,
	write(user_error,'Time taken: '),
	writeln(user_error,TakenTime),
	write(user_error,'Rate: '),
	writeln(user_error,Rate).
