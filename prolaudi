#!/usr/bin/env swipl
% vim: ft=prolog:noet:ts=4:sw=4
:-	initialization(main,main)
,	use_module(library(protobufs))
,	use_module(library(yall))
,	use_module(library(readline))
,	use_module(library(process))
.

say(X):-maplist(write(user_error),X).
sayl(L):-maplist([I]>>( say([I,"\n"]) ),L).

rate(44100).
version('0.0.0').

timetone(Time,Tone,L,t(Tone,M)):-number(L),number(M),Time is L * M.
timetone(Time,Tone,Time,Tone):-number(Time).

ostfm0(t(Ho,L),t(Hi,L)):-ostfm0(Ho,Hi).
ostfm0(2 ** ( Hi / 12 ),Hi).
	
note0(Ost,Chromatic,Scaled):-
	ost(Ost,O),
	length(O,Ostlen),
	Octave is div(Scaled,Ostlen),
	Offset is mod(Scaled,Ostlen),
	nth0(Offset,O,Ostval),
	Chromatic is Octave*12 + Ostval.
	
note1(Ost,t(Chromatic,L),t(Scaled,L)):- note1(Ost,Chromatic,Scaled).
note1(Ost,Chromatic,sharp(Scaled)):-    note0(Ost,Ca,Scaled),Chromatic is Ca + 1.
note1(Ost,Chromatic,flat(Scaled)):-     note0(Ost,Ca,Scaled),Chromatic is Ca - 1.
note1(Ost,Chromatic,Scaled):-           note0(Ost,Chromatic,Scaled).
%eventseqp(Time,Event,Seq):-
%eventseqp(Event,Seq):-
%

esp(_,[],[]).
esp(Time,[Hi|Ti],[[Time,Hi]|To]):-esp(Time,Ti,To). %single note


seqp_(_,[],[]).
seqp_(Time,[Hi|Ti],[Ho|To]):- % single "event", ie. list of notes
	nth0(0,Hi,note(Mna,_)),
	foldl([E,If,Of]>>(
		E=note(Lf,_),
		Of is min(If,Lf)
	),Hi,Mna,O),
	TimeN is Time + O,
	esp(Time,Hi,Ho),
	seqp_(TimeN,Ti,To).

seqp(In,Out):-
	seqp_(0,In,Oz),
	append(Oz,Out).

timeseqp(TuneName,Seqp):-
	rate(Rate),
	ptune(TuneName,Scale,Key,Notelen,Tune),

	maplist([Event,F]>>(
	maplist([Note,Funct]>>(
		note1(Scale,Nm,Note),
		ostfm0(Fm,Nm),
		timetone(Time,Tone,Notelen,Fm),
		Funct=..[note,Time,Rate*Key*Tone]
		),Event,F)
	),Tune,Seq),
	sayl(['seq:'|Seq]),
	seqp(Seq,Seqp),
	sayl(['seqp:'|Seqp]),
	ctsp(Seqp,C),
	sayl(['c:'|C]),
	lenseq(C,L),
	sayl(['l:'|L]),
	trace,
	sampleseq(L,SS).

ctsp([],[]).
ctsp([[Time,Event],[Time,Eb]|Tseqp],[[Time,[Event|Tn]]|Tctsp]):-
	ctsp([[Time,Eb]|Tseqp],[[Time,Tn]|Tctsp]).
ctsp([[Time,Event]|Tseqp],[[Time,[Event]]|Tctsp]):-
	ctsp(Tseqp,Tctsp).

lenseq([], []).
lenseq([[Time, Notes] | Ti], [[seg(LenS, Time), Notes] | To]) :-
    maplist([note(Len, _), Len]>>true, Notes, Lens),
    min_list(Lens, LenS),
    lenseq(Ti, To).


%note(SampleCount,SampleStart,SampleEnd,SampleLen,Tone)
sampleseq([],[]).
sampleseq(L,SS):-sampleseq(L,SS,[]).
sampleseq([],[[_,[]]],_). % actual terminal?
sampleseq([[_,[]],[Next|Notes]|Teli],[[]|Telo],Acc):- % end of current time
	append(Acc,Notes,AccNotes),
	sampleseq(Teli,[[Next,AccNotes]|Telo],Acc).

sampleseq([[seg(Slen,Time),[note(Len,Tone)|Te]]|Teli],[[seg(SlenS,TimeS),[N|Tes]]|Telo],AccI):-
	rate(Rate),
	SlenS is truncate(Slen * Rate),
	LenS is truncate(Len * Rate),
	(	LenS =< SlenS	% event fits within timeseg
	->(	N=note(LenS,Tone),
		sampleseq([[Time,Te]|Teli],[[TimeS,Tes]|Telo],AccI)
	);(	
		RemS = LenS-Slens,
		N=note(StartS,RemS,Tone),
		sampleseq([[seg(Slen,Time),Te]|Teli],[[seg(SlenS,TimeS),Tes]|Telo],AccI)
		%append(AccI,[split(
		% need to accumulate split notes... TODO
		%N=split(
	)).


seqnote(Stream):-
	rate(Rate),

	TuneName=holyholyholy,
	%TuneName=jesuslovesme,
	say(["Playing '",TuneName,"'.\n"]),
	tune(TuneName,Scale,Key,Notelen,Tune),

	maplist([Tm]>>(
		note1(Scale,Nm,Tm),
		ostfm0(Fm,Nm),
		timetone(Time,Tone,Notelen,Fm),
		SampleCount is truncate(Rate*Time),
		numlist(1,SampleCount,IndexList),
		maplist([Im]>>(
			Sm is sin(2*pi* Tone * Key * (Im-1) / Rate),
			protobufs:float32_codes(Sm,Cm),
			maplist(put_byte(Stream),Cm)
		),IndexList)
	),Tune).

mins([A,_],[B,_]):-min(A,B).

minn(A,B,C):-C is min(A,B).

mixdown(Counts,Signals,Write,BufferIn,BufferOut):-
	min_member(Mn,Counts),
	max_member(Mx,Counts),
	numlist(1,Mx,IndexList),
	maplist([Index,BufferOutM]>>(
		( nth1(Index,BufferIn,A) ; A=0.0 ),
		foldl([S,I,O]>>(
			nth1(Index,S,V),
			say([I,"\n"]),
			O is I + V;
			O=I
		),Signals,A,BufferOutM)
	),IndexList,BufferOut),
	say([Mn,Write]).%hiding error

pnote():-
	rate(Rate),

	TuneName=holyholyholy,
	ptune(TuneName,Scale,Key,Notelen,Tune),

	maplist([Event]>>(
		maplist([Note,Sz,SampleCount]>>(
			note1(Scale,Nm,Note),
			ostfm0(Fm,Nm),
			timetone(Time,Tone,Notelen,Fm),
			SampleCount is truncate(Rate*Time),
			numlist(1,SampleCount,IndexList),
			maplist([Im,Sm]>>(
				Sm is sin(2*pi* Tone * Key * (Im-1) / Rate)
			),IndexList,Sz)
		),Event,S,SampleCounts),
		mixdown(SampleCounts,S,Write,[],BufferOut),
		say([BufferOut,"\n",Write])
		%min_member(Msc,SampleCounts),
		%say([Msc,"\n"])
	),Tune).
		/*
		.

				protobufs:float32_codes(Sm,Cm),
				maplist(put_byte(user_output),Cm)
			),IndexList)
	),Tune).
	*/

default_history_file('~/.swipl_history').

assert_history_file:-
	default_history_file(D),
	current_predicate(rl_read_history/1) -> (
		expand_file_name(D,[F]),
		assert(history_file(F))
	) ; true.

load_history :-
	history_file(F),
	exists_file(F) -> (
		rl_read_history(F)
	) ; true.

save_history :-
	history_file(F),
    rl_write_history(F).

enter_repl():-
	current_prolog_flag(readline,readline),
	%set_prolog_flag(history,0),
	assert_history_file,
	load_history,
	at_halt(save_history),
	prolog,
	halt.

program_name(Name):-
	source_file(main,N),
	file_directory_name(N,D),
	file_base_name(D,Name).

timed_goal(Goal):-
	get_time(StartTime),
	call(Goal),
	get_time(EndTime),
	TakenTime is EndTime-StartTime,
	say(['Time taken: ',TakenTime,"\n"]).

main:-
	OptSpec = [[
		opt(render),
		type(boolean),
		default(true),
		longflags(['render']),
		help(['render audio to stdout',
			'--no-render to disable'])
	],[	opt(help),
		type(boolean),
		default(false),
		shortflags([h]),
		longflags(['help']),
		help('print help')
	],[	opt(quiet),
		type(boolean),
		default(false),
		shortflags([q]),
		longflags(['quiet']),
		help('emit nothing to stderr')
	],[	opt(stream),
		type(boolean),
		default(false),
		shortflags([s]),
		longflags(['stream']),
		help('emit audio to pw-cat directly')
	],[	opt(filter),
		type(boolean),
		default(false),
		shortflags([f]),
		longflags(['filter']),
		help('filter audio according to dsp')
	],[	opt(prolog),
		type(boolean),
		default(false),
		shortflags([p]),
		longflags(['prolog']),
		help('enter SWI-Prolog REPL')
	]],

	current_prolog_flag(argv,A),
	opt_parse(OptSpec,A,O,_),
	
	(member(quiet(true),O) ; (
		program_name(Name),
		version(Ver),
		say([Name," - Prolog Audio Synthesizer v",Ver,"\n"]),
		(member(help(true),O) -> (
			opt_help(OptSpec,H),
			say(["\nCommand-line options:\n\n",H]),
			halt
		);true)
	)),

	( member(prolog(true),O) -> enter_repl ; true ),
	( member(render(false),O) -> halt ; true ),
	%timed_goal(pnote).
	
	rate(Rate),
	(	member(stream(true),O) 
	->	(	member(filter(true),O)
		->	process_create(path('pw-cat'),['--playback','--format','f32','--rate',Rate,'--channels','2','-'],[stdin(pipe(FilterStream))]), %process order matters!
			process_create(path('ffmpeg'),['-hide_banner','-loglevel','warning','-f','f32le','-ar',Rate,'-channel_layout','mono','-i','-','-af','ladspa=file=tap_reverb:tap_reverb','-f','f32le','-acodec','pcm_f32le','-'],[stdin(pipe(Stream)),stdout(stream(FilterStream))])
		;	process_create(path('pw-cat'),['--playback','--format','f32','--rate',Rate,'--channels','1','-'],[stdin(pipe(Stream))])
		)
	;	Stream=user_output
	),
	set_stream(Stream,type(binary)),
	timed_goal(seqnote(Stream)),
	!.

tune(jesuslovesme,pentatonic,432,1r2,[ %scaled, timed
3,2,2,1,2,3,t(3,2),
4,4,5,4,4,3,t(3,2),
3,2,2,1,2,3,t(3,2),
4,4,3,0,2,1,t(0,2),

t(3,2),2,3,4,t(5,3),
t(3,2),2,0,2,t(1,3),
t(3,2),2,3,4,t(5,2),4,
3,0,2,1,t(0,3)
]).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tune(holyholyholy,phrygian,432r4,1r12,[ %phrygian?
%
%ho           ly            ho             ly
5,7,9,t(12,5), 5,7,9,t(12,5), 3,5,12,t(14,5), 3,5,12,t(14,5),
%h             o           l              y
2,6,11,t(16,5), 2,8,t(13,6), 5,7,12,t(16,5), 5,9,t(11,6),
%l             o          rd         god             al
1,8,10,t(17,5), 1,9,11,17, 1,9,11,17, 8,10,12,t(17,5), 8,11,13,t(17,5),
%mi             gh             ty
5,11,14,t(16,5), 5,9,14,t(16,5), t(5,2),t(9,2),t(12,2),t(14,10),

%early in the morn
4,11,13,t(16,5),
4,11,13,16,
4,11,13,16,
4,12,14,t(16,5),
4,11,13,t(16,5),

3,7,12,t(19,5),
3,sharp(8),13,t(19,5),
4,9,13,t(18,5),
5,9,14,t(16,5),

6,11,t(13,6),
6,9,11,t(16,5),
6,sharp(8),12,t(17,5),
6,sharp(8),12,17,
2,9,11,16,

2,9,11,16,
2,9,11,16,
2,9,11,16,
2,9,11,16,

2,8,11,16,
2,8,11,16,
2,8,11,16,
2,8,11,16,

%2nd loop - holyholyholy

5,7,9,t(12,5),
5,7,9,t(12,5),
3,5,12,t(14,5),
3,5,12,t(14,5),

2,6,11,t(16,5),
2,8,13,t(16,5),
5,7,12,t(16,5),
5,9,t(11,6),

1,8,10,t(17,5),
1,9,11,17,
1,9,11,17,
8,10,12,t(17,5),
8,11,13,t(17,5),

5,11,14,t(16,5),
5,9,14,t(16,5),
t(5,2),t(9,2),t(12,2),t(16,10),


%god in three
t(3,2),7,8,t(12,2),t(19,10),
0,9,12,t(16,5),
0,flat(11),12,t(16,5),

t(1,2),t(10,2),t(12,2),t(17,10),
t(5,2),t(9,2),12,flat(11),t(14,10),

1,8,11,t(15,5),
1,8,11,t(13,5),
2,9,11,t(13,5),
2,9,11,13,
5,8,12,
6,8,11,
7,8,10,
6,8,11,
5,8,12,
5,16,12,
5,14,12,
5,10,12,
5,8,12,
5,8,12,
5,8,12,
5,8,12

]).

ptune(holyholyholy,phrygian,432r4,1r4410,[ %phrygian?
[t(5,2),7,9,12], [7,9,12], [3,5,12,14], [3,5,12,14]
]).

modality([0,+2,+2,+1,+2,+2,+2,+1]).

%octave scale twelve-tet
ost(maj,[0,4,7]).
ost(min,[0,3,7]).
ost(maj7,[0,4,7,11]).

ost(ionian,    [0,2,4,5,7,9,11]).
ost(dorian,    [0,2,3,5,7,9,10]).
ost(phrygian,  [0,1,3,5,7,8,10]).
ost(lydian,    [0,2,4,6,7,9,11]).
ost(mixolydian,[0,2,4,5,7,9,10]).
ost(aeolian,   [0,2,3,5,7,8,10]).
ost(locrian,   [0,1,3,5,6,8,10]).

ost(pentatonic, [0,2,4,7,9]). % jesus loves me scale (pentatonic!)

