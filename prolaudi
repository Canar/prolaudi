#!/usr/bin/env swipl
% vim: ft=prolog:noet:ts=4:sw=4
:-	initialization(main,main)
,	use_module(library(protobufs))
,	use_module(library(yall))
,	use_module(library(readline))
,	use_module(library(process))

%,	use_module(library(prolog_profile))
%,	set_prolog_flag(stack_limit, 2_147_483_648)

.

say(X):-maplist(write(user_error),X).
sayl(L):-maplist([I]>>( say([I,"\n"]) ),L).

rate(44100).
version('0.0.0').

timetone(Time,Tone,L,t(Tone,M)):-number(L),number(M),Time is L * M.
timetone(Time,Tone,Time,Tone):-number(Time).

ostfm0(t(Ho,L),t(Hi,L)):-ostfm0(Ho,Hi).
ostfm0(2 ** ( Hi / 12 ),Hi).
	
note0(Ost,Chromatic,Scaled):-
	ost(Ost,O),
	length(O,Ostlen),
	divmod(Scaled,Ostlen,Octave,Offset),
	nth0(Offset,O,Ostval),
	Chromatic is Octave*12 + Ostval.
	
note1(Ost,t(Chromatic,L),t(Scaled,L)):- note1(Ost,Chromatic,Scaled).
note1(Ost,Chromatic,sharp(Scaled)):-    note1(Ost,Ca,Scaled),Chromatic is Ca + 1.
note1(Ost,Chromatic,flat(Scaled)):-     note1(Ost,Ca,Scaled),Chromatic is Ca - 1.
note1(Ost,Chromatic,Scaled):-           note0(Ost,Chromatic,Scaled).

%esp applies a time code to a note by wrapping it in a list. used by seqp_ only
esp(_,[],[]).
esp(Time,[Hi|Ti],[[Time,Hi]|To]):-esp(Time,Ti,To). %single note

%seqp applies time codes to a list of notes
seqp(In,Out):-
	seqp_(0,In,Oz),
	append(Oz,Out).
seqp_(_,[],[]).
seqp_(Time,[Hi|Ti],[Ho|To]):- % single "event", ie. list of notes
	nth0(0,Hi,note(Mna,_)),
	foldl([E,If,Of]>>(
		E=note(Lf,_),
		minn(If,Lf,Of)
	),Hi,Mna,O),
	TimeN is Time + O,
	esp(Time,Hi,Ho),
	seqp_(TimeN,Ti,To).

%ctsp splits seqp output by time by matching subsequent times
ctsp([],[]).
ctsp([[Time,Event],[Time,Eb]|Tseqp],[[Time,[Event|Tn]]|Tctsp]):- %next event is at same time as current
	ctsp([[Time,Eb]|Tseqp],[[Time,Tn]|Tctsp]).
ctsp([[Time,Event]|Tseqp],[[Time,[Event]]|Tctsp]):- %next event must not be at same time as current
	ctsp(Tseqp,Tctsp).

%provide segment lengths, times, validate that the segment is as short as longest note
lenseq([], []). 
lenseq([[Time, Notes] | Ti], [[seg(LenS, Time), Notes] | To]) :-
    maplist([note(Len, _), Len]>>true, Notes, Lens),
    min_list(Lens, LenS),
    lenseq(Ti, To).

%splits notes from events such that they fit within seg
sampleseq(L,SS):-sampleseq(L,SS,[]).
sampleseq([],[],[]).
sampleseq([[seg(Slen,Time),Notes]|Rest], [[seg(Slen,Time),Processed]|SS], Acc) :-
    append(Acc,Notes,AllNotes),
    process_notes(Slen,AllNotes,Processed,NewAcc),
    (   Rest = [], NewAcc \= []
    ->  NewTime is Time + Slen,
        sampleseq([[seg(Slen,NewTime),NewAcc]], SS, [])
    ;   sampleseq(Rest, SS, NewAcc)
    ).

%handles notes from sampleseq event
process_notes(_,[],[],[]).
process_notes(Slen,[Note|Notes],[Split|Processed],Acc):-
	split_note(Slen,Note,Split,Remainder),!,
	(	Remainder = none
	->	process_notes(Slen,Notes,Processed,Acc)
	;	Acc=[Remainder|NewAcc],
		process_notes(Slen,Notes,Processed,NewAcc)
	).

%handles note splitting logic
split_note(Slen,note(Len,Tone),note(Len,Tone),none) :- Len =< Slen.
split_note(Slen,note(Len,Tone),note(Slen,Tone),note(Slen,Len,Tone)) :- Rem is Len - Slen,Rem>0.
split_note(Slen,note(Start,Len,Tone),note(Start,Len,Tone),none) :- Start+Slen >= Len.
split_note(Slen,note(Start,Len,Tone),note(Start,End,Tone),note(End,Len,Tone)) :- End is Start+Slen,End<Len.

%TODO: instead of using numlist to generate a buffer, pass the buffer in and sum to it
%writes sampleseq output to Stream
render_notes([],Stream):-close(Stream),!.
render_notes([[_,Notes]|Ti],Stream):-
	%numlist
	maplist([Note,O]>>(
		render_note(Note,O)
	),Notes,Os),
	repose(Os,Sums),
	maplist([F]>>(
		protobufs:float32_codes(F,C),
		maplist(put_byte(Stream),C)
	),Sums),
	render_notes(Ti,Stream).

%TODO: instead of using numlist to generate a buffer, pass the buffer in and sum to it
render_note(note(Len,Tone),O):-render_note(note(0,Len,Tone),O).
render_note(note(Start,Len,Tone),O):-
	rate(Rate),
	Coeff is 2 * pi / Rate,
	StartS is truncate(Start*Rate),
	LenS is truncate(Len*Rate)-1,
	numlist(StartS,LenS,IndexList),
	maplist([Index,BufferOutM]>>(
		BufferOutM is sin(Coeff * Tone * Index)/5
	),IndexList,O).

repose([], []).
repose([[]|_], []).
repose(Lists, [Val|Rows]) :-
    maplist(nth0(0), Lists, Row),
	sumlist(Row,Val),
    maplist(tail, Lists, Tails),
    repose(Tails, Rows).

transpose([], []).
transpose([[]|_], []).
transpose(Lists, [Row|Rows]) :-
    maplist(nth0(0), Lists, Row),
    maplist(tail, Lists, Tails),
    transpose(Tails, Rows).

tail([_|T], T).

render_ptune(TuneName,Stream):-
	ptune(TuneName,Scale,Key,Notelen,Tune),

	maplist([Event,F]>>(
	maplist([Note,Funct]>>(
		note1(Scale,Nm,Note),
		ostfm0(Fm,Nm),
		timetone(Time,Tone,Notelen,Fm),
		Funct=..[note,Time,Key*Tone]
		),Event,F)
	),Tune,Seq),
	seqp(Seq,Seqp),
	ctsp(Seqp,C),
	lenseq(C,L),
	sampleseq(L,SS),
	render_notes(SS,Stream).

seqnote(Stream):-
	rate(Rate),

	TuneName=holyholyholy,
	%TuneName=jesuslovesme,
	say(["Playing '",TuneName,"'.\n"]),
	tune(TuneName,Scale,Key,Notelen,Tune),

	maplist([Tm]>>(
		note1(Scale,Nm,Tm),
		ostfm0(Fm,Nm),
		timetone(Time,Tone,Notelen,Fm),
		SampleCount is truncate(Rate*Time),
		numlist(1,SampleCount,IndexList),
		maplist([Im]>>(
			Sm is sin(2*pi* Tone * Key * (Im-1) / Rate),
			protobufs:float32_codes(Sm,Cm),
			maplist(put_byte(Stream),Cm)
		),IndexList)
	),Tune).

mins([A,_],[B,_]):-min(A,B).
minn(A,B,C) :- A>B -> C=B ; C=A.

pwcat_process(Stream,Channels) :- device_process(path('pw-cat'),['--playback','--format',f32],['-'],Channels,Stream).
pacat_process(Stream,Channels) :- device_process(path(pacat),['--playback','--raw','--format',float32le],[],Channels,Stream).
aaw_process(Stream,Channels)   :- device_process('../2b/AAudio-write',[],[],Channels,Stream).

device_process(Exe,Pre,Post,Channels,Stream):-
	rate(Rate),
	append([Pre,['--rate',Rate,'--channels',Channels],Post],Args),
	process_create(Exe,Args,[stdin(pipe(Stream))]),
	set_stream(Stream,type(binary)).

device_stream(Stream,Channels):-
	platform(Platform),
	platform_device(Platform,Device),
	call(Device,Stream,Channels).

platform_device(linux,pwcat_process).
platform_device(termux,aaw_process).

%StdOut=stream(Out)
%StdIn=pipe(In)
ffmpeg_in_out(In,Out,Filter):-
	rate(Rate),
	process_create(path('ffmpeg'),
		['-hide_banner','-loglevel','warning',
		'-f','f32le','-ar',Rate,'-channel_layout','mono','-i','-',
		'-af',Filter,'-f','f32le','-acodec','pcm_f32le','-'],
		[stdin(pipe(In)),stdout(stream(Out))]
	),
	set_stream(In,type(binary)).

filter_config(reverb,2,'ladspa=file=tap_reverb:tap_reverb'):-platform(linux).
filter_config(normal,1,'dynaudnorm').
platform_filter(linux,reverb).
platform_filter(termux,normal).
device_config(pwcat_stream,path('pw-cat'),['--playback','--format','f32'],['-']).
device_config(pacat_stream,path('pacat'),['--playback','--raw','--format','float32le'],[]).

filter_chan(Chan):-
	platform(P),
	platform_filter(P,F),
	filter_config(F,Chan,_).

filter_stream(In,Out):-
	platform(Plat),
	platform_filter(Plat,Filt),
	filter_config(Filt,_,Config),
	ffmpeg_in_out(In,Out,Config).

stdout_stream(user_output) :- set_stream(user_output,type(binary)).

default_history_file('~/.swipl_history').

assert_history_file:-
	default_history_file(D),
	current_predicate(rl_read_history/1) -> (
		expand_file_name(D,[F]),
		assert(history_file(F))
	) ; true.

load_history :-
	history_file(F),
	exists_file(F) -> (
		rl_read_history(F)
	) ; true.

save_history :-
	history_file(F),
    rl_write_history(F).

enter_repl():-
	current_prolog_flag(readline,readline),
	%set_prolog_flag(history,0),
	assert_history_file,
	load_history,
	at_halt(save_history),
	prolog,
	halt.

program_name(Name):-
	source_file(main,N),
	file_directory_name(N,D),
	file_base_name(D,Name).

timed_goal(Goal):-
	get_time(StartTime),
	call(Goal),
	get_time(EndTime),
	TakenTime is EndTime-StartTime,
	say(['Time taken: ',TakenTime,"\n"]).


print_banner(O,OptSpec) :-
	name(Name),
	version(Ver),
	say([Name," - Prolog Audio Synthesizer v",Ver,"\n"]),
	(member(help(true),O) -> (
		opt_help(OptSpec,H),
		say(["\nCommand-line options:\n\n",H]),
		halt
	);true).

who_am_i:-
	source_file(main,N),
	assert(exec(N)),
	file_directory_name(N,D),
	assert(dir(D)),
	file_base_name(D,Name),
	assert(name(Name)),

	( current_prolog_flag(android,A) ; A=false ),
	( current_prolog_flag(unix,U) ; U=false ),
	( U -> ( A -> P=termux ; P=linux ) ; P=unsupported),
	assert(platform(P)).

main:-
	who_am_i,
	OptSpec = [[
		opt(render),
		type(boolean),
		default(true),
		longflags(['render']),
		help(['render audio to stdout',
			'--no-render to disable'])
	],[	opt(help),
		type(boolean),
		default(false),
		shortflags([h]),
		longflags(['help']),
		help('print help')
	],[	opt(quiet),
		type(boolean),
		default(false),
		shortflags([q]),
		longflags(['quiet']),
		help('emit nothing to stderr')
	],[	opt(stream),
		type(boolean),
		default(false),
		shortflags([s]),
		longflags(['stream']),
		help('emit audio to pw-cat directly')
	],[	opt(filter),
		type(boolean),
		default(false),
		shortflags([f]),
		longflags(['filter']),
		help('filter audio according to dsp')
	],[	opt(prolog),
		type(boolean),
		default(false),
		shortflags([p]),
		longflags(['prolog']),
		help('enter SWI-Prolog REPL')
	]],

	current_prolog_flag(argv,A),
	opt_parse(OptSpec,A,O,_),
	
	( member(quiet(true),O) ; print_banner(O,OptSpec) ),
	( member(prolog(true),O) -> enter_repl ; true ),
	( member(render(false),O) -> halt ; true ),

	( member(filter(true),O) -> filter_chan(Chan) ; Chan=1 ), %tap_reverb makes stereo from mono
	( member(stream(true),O) -> device_stream(Dev,Chan) ; stdout_stream(Dev) ),
	( member(filter(true),O) -> filter_stream(Write,Dev) ; Write=Dev ),
	timed_goal(render_ptune(holyholyholy,Write)),
	!.

tune(jesuslovesme,pentatonic,432,1r2,[ %scaled, timed
3,2,2,1,2,3,t(3,2),
4,4,5,4,4,3,t(3,2),
3,2,2,1,2,3,t(3,2),
4,4,3,0,2,1,t(0,2),

t(3,2),2,3,4,t(5,3),
t(3,2),2,0,2,t(1,3),
t(3,2),2,3,4,t(5,2),4,
3,0,2,1,t(0,3)
]).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tune(holyholyholy,phrygian,432r4,1r12,[ %phrygian?
%
%ho           ly            ho             ly
5,7,9,t(12,5), 5,7,9,t(12,5), 3,5,12,t(14,5), 3,5,12,t(14,5),
%h             o           l              y
2,6,11,t(16,5), 2,8,t(13,6), 5,7,12,t(16,5), 5,9,t(11,6),
%l             o          rd         god             al
1,8,10,t(17,5), 1,9,11,17, 1,9,11,17, 8,10,12,t(17,5), 8,11,13,t(17,5),
%mi              gh              ty
5,11,14,t(16,5), 5,9,14,t(16,5), t(5,2),t(9,2),t(12,2),t(14,10),

%early in the morn
4,11,13,t(16,5),
4,11,13,16,
4,11,13,16,
4,12,14,t(16,5),
4,11,13,t(16,5),

3,7,12,t(19,5),
3,sharp(8),13,t(19,5),
4,9,13,t(18,5),
5,9,14,t(16,5),

6,11,t(13,6),
6,9,11,t(16,5),
6,sharp(8),12,t(17,5),
6,sharp(8),12,17,
2,9,11,16,

2,9,11,16,
2,9,11,16,
2,9,11,16,
2,9,11,16,

2,8,11,16,
2,8,11,16,
2,8,11,16,
2,8,11,16,

%2nd loop - holyholyholy

5,7,9,t(12,5),
5,7,9,t(12,5),
3,5,12,t(14,5),
3,5,12,t(14,5),

2,6,11,t(16,5),
2,8,13,t(16,5),
5,7,12,t(16,5),
5,9,t(11,6),

1,8,10,t(17,5),
1,9,11,17,
1,9,11,17,
8,10,12,t(17,5),
8,11,13,t(17,5),

5,11,14,t(16,5),
5,9,14,t(16,5),
t(5,2),t(9,2),t(12,2),t(16,10),


%god in three
t(3,2),7,8,t(12,2),t(19,10),
0,9,12,t(16,5),
0,flat(11),12,t(16,5),

t(1,2),t(10,2),t(12,2),t(17,10),
t(5,2),t(9,2),12,flat(11),t(14,10),

1,8,11,t(15,5),
1,8,11,t(13,5),
2,9,11,t(13,5),
2,9,11,13,
5,8,12,
6,8,11,
7,8,10,
6,8,11,
5,8,12,
5,16,12,
5,14,12,
5,10,12,
5,8,12,
5,8,12,
5,8,12,
5,8,12

]).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ptune(holyholyholy,phrygian,432r4,1,[ %phrygian?
/*
%ho        ly         ho          ly
[5,7,9,12],[5,7,9,12],[3,5,12,14],[3,5,12,14],
%h                    o      l                     y
[t(2,2),6,11,t(16,2)],[8,13],[t(5,2),7,10,t(16,2)],[9,9],
%lo         rd          god           al
[1,8,10,17],[1,9,11,17],[8,10,12,17], [8,11,13,17],
%mi          gh          ty
[5,11,14,16],[5,9,14,16],[t(5,2),t(9,2),t(12,2),t(14,2)],
*/
%ear                                 ly                    in           the
[4,11,13,t(16,3r2)],[4,11,t(13,1r2)],[t(13,1r2),t(16,1r2)],[4,12,14,16],[4,11,13,16],
%mo         rn                 ing         our
[3,7,12,19],[3,sharp(8),13,19],[4,9,13,18],[5,9,14,16],
%song     shall       rise
[6,11,13],[6,9,11,16],[t(6,3r2),t(sharp(8),3r2),t(12,3r2),t(17,3r2)],
%to                                      thee
[t(2,1r2),t(9,1r2),t(11,1r2),t(16,1r2)], [t(2,4),t(9,2),t(11,4),t(16,4)],[t(8,2)]

/*
%2nd loop - holyholyholy

5,7,9,t(12,5),
5,7,9,t(12,5),
3,5,12,t(14,5),
3,5,12,t(14,5),

2,6,11,t(16,5),
2,8,13,t(16,5),
5,7,12,t(16,5),
5,9,t(11,6),

1,8,10,t(17,5),
1,9,11,17,
1,9,11,17,
8,10,12,t(17,5),
8,11,13,t(17,5),

5,11,14,t(16,5),
5,9,14,t(16,5),
t(5,2),t(9,2),t(12,2),t(16,10),


%god in three
t(3,2),7,8,t(12,2),t(19,10),
0,9,12,t(16,5),
0,flat(11),12,t(16,5),

t(1,2),t(10,2),t(12,2),t(17,10),
t(5,2),t(9,2),12,flat(11),t(14,10),

1,8,11,t(15,5),
1,8,11,t(13,5),
2,9,11,t(13,5),
2,9,11,13,
5,8,12,
6,8,11,
7,8,10,
6,8,11,
5,8,12,
5,16,12,
5,14,12,
5,10,12,
5,8,12,
5,8,12,
5,8,12,
5,8,12
*/
]).

ptune(ht,phrygian,432r4,1r441,[
[t(5,3),7],[9]
]).
modality([0,+2,+2,+1,+2,+2,+2,+1]).

%octave scale twelve-tet
ost(maj,[0,4,7]).
ost(min,[0,3,7]).
ost(maj7,[0,4,7,11]).

ost(ionian,    [0,2,4,5,7,9,11]).
ost(dorian,    [0,2,3,5,7,9,10]).
ost(phrygian,  [0,1,3,5,7,8,10]).
ost(lydian,    [0,2,4,6,7,9,11]).
ost(mixolydian,[0,2,4,5,7,9,10]).
ost(aeolian,   [0,2,3,5,7,8,10]).
ost(locrian,   [0,1,3,5,6,8,10]).

ost(pentatonic, [0,2,4,7,9]). % jesus loves me scale (pentatonic!)

